1. Formatting information from git log

$ git log --oneline = only important info about commits

$ git show = more details about last commit

$ git log -p = for all commits

$ git log --stat = what amount of work was done in the commit;  how many lines were added or removed in each commit

$ git shortlog = information sorted by author of the commits

2. Prettier output

$ git log --graph

$ git log --oneline --graph

3.  Formatting

--decorate parameter

ex: %Cblue - switch output text to blue

%Creset - resets the color to default

%H - commit hash. Preferable is to use short hash with %h.

%an - who commited the changes

%ad - date of commit. For scripting purposes you can use UNIX timestamp - %at.

%s - commit message

How to format our commad to use these?

git log --pretty - this is how we start

clear && git log --graph --pretty="%C(yellow) Hash: %h %C(blue)Date: %ad %C(red) Message: %s " --date=human

Please, go through the command and understand all arguments.

Let's test some different ideas. Try to guess what the command output will be, before you execute them!

clear && git log --graph --pretty="%ad" --date=short

For better clarity you can add format to parameter

git log --graph --pretty=format:"%ad" --date=short

It will do the same. Here are another examples.

clear && git log --graph --pretty="%ad"

clear && git log --graph --pretty="%at"

clear && git log --graph --pretty="%as"

clear && git log --graph --pretty="%C(bold blue)%h"

clear && git log --graph --pretty="%C(bold blue)%h %Cred%s %C(Yellow)by %an"

Another example found on the Internet

clear && git log --graph --pretty=format:"%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset" --abbrev-commit

4. Create aliases

git config --global alias.lg 'log --color --graph --pretty="%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset" --abbrev-commit'

We instruct git that we want to change configuration (config), on global table (--global) and we configure alias called lg (alias.lg). The alias itself is inside the '' section.

Now you can execute your alias

$ git lg

5. Querying

$ git log --author="John Doe" will show all commits done by specific author.

$ git log --author="John Doe\|Joe Smith" - with this regex we asked for all commits authored by these two people.

$ git log --grep="JIRA-1234"

-> we have identifier, we can even attach it to Jira itself (by plugins). And use it... for searching through git log!

$ clear && git log -- testfile-01 = log for a specific file

$ clear && git log -- testfile-02 branchfile-01

-- = This way we inform git that we have files, not branches in mind.

$ clear && git log --merges

$ clear && git log --no-merges

$ clear && git log --after=2021-4-21

$ clear && git log --before=2021-4-21

$ clear && git log --before 2021-4-30 --after=2021-4-1

$ clear && git log --after=yesterday

$ clear && git log -3 = to limit number of returned commits

$ clear && git log -1 --grep="JIRA"

$ clear && git log -5 --grep="commit" --oneline

