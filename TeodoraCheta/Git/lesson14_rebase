1. Rebase

-> using rebase to make history more clean, clear and ordered

Steps:

Step1. is similar to previous activity - merge. We have master and branch.

Step2. When we perform the rebase operation, parent commit of the branch (the one from where we created branch) 
is moved to the HEAD of master, all differences between master and branch are merger and all commits on the branch are "copied/moved" (with all respective changes from master branch).

Step3. The last thing is to do merge on master branch in order to move HEAD of master to the proper place.

$ git checkout second-branch

$ git rebase master

$ git adog

Right now we can see two things

history looks totally different. Is 'flat' now and shuffled.
HEAD of master is in the wrong position.
If we leave it that way, believe, we generate a chaos, mess, and comments of hatred ;P So, let's switch to master and then move the marker by merge the branch to master.

$ git checkout master

$ git merge second-branch

$ git adog

Now we have HEAD in proper place and the history which, in fact, does not represent the past work order, but is more readable.

